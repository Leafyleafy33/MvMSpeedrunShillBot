from gensim.models import Word2Vec
from nltk.tokenize import word_tokenize
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import numpy as np
import random

class MissionClusterer:
    """
    A class for clustering mission names based on Word2Vec embeddings and KMeans clustering.

    This class clusters mission names into groups and assigns random emojis to each cluster.
    
    Attributes:
        mission_names (list): A list of mission names to be clustered.
        n_clusters (int, optional): The number of clusters to create (default is 30).
    """
    def __init__(self, mission_names, n_clusters=30):
        self.mission_names = mission_names
        self.n_clusters = n_clusters
        self.cluster_names_emojis = {
    0: ['Timekeepers', '‚è≥', 'üï∞Ô∏è', 'üåü', 'üöÄ', 'üåà', '‚ò£Ô∏è', 'üßö', 'üèùÔ∏è', 'üé≤', 'üåå'],           
    1: ['Toxic Wastelands', 'üíÄ', 'üîç', 'üåä', 'üå´Ô∏è', '‚ùì', 'üåÖ', 'üåí', 'üíß', 'üé≤', 'üå†'],       
    2: ['Enchanted Enigmas', 'üîÆ', 'üåÖ', 'üåå', 'üå†', 'üå™Ô∏è', 'üîç', 'üìú', 'üåü', 'üçÑ', '‚öôÔ∏è'],         
    3: ['Coastal Treasures', 'üèñÔ∏è', 'üçÄ', 'üåÄ', 'üïØÔ∏è', 'üèîÔ∏è', 'üî≠', 'üé∂', 'üå≤', '‚öôÔ∏è', 'üß®'],       
    4: ['Lucky Foragers', 'üçÄ', 'üåÄ', 'üåä', 'üåÖ', '‚ö°', 'üîÆ', 'üèùÔ∏è', 'üå´Ô∏è', 'üíß', 'üé≤'],       
    5: ['Twilight Voyages', 'üåå', '‚ö°', 'üåÖ', 'üèùÔ∏è', 'üîÆ', 'üìú', 'üå™Ô∏è', 'üåä', 'üé≤', 'üß®'],       
    6: ['Whirling Winds', 'üå™Ô∏è', 'üå¨Ô∏è', 'üîÆ', 'üçÄ', 'üé≤', 'üèñÔ∏è', 'üå†', '‚öôÔ∏è', 'üß®', 'üåí'],           
    7: ['Eclipse Enigmas', 'üåë', 'üåí', 'üèîÔ∏è', 'üîç', 'üå™Ô∏è', 'üåå', 'üïØÔ∏è', 'üíÄ', 'üíß', '‚öôÔ∏è'],        
    8: ['Lakeside Serenity', 'üíß', 'üèùÔ∏è', 'üåå', 'üåÄ', 'üåà', 'üîÆ', 'üåÖ', 'üå≤', 'üìú', 'üíÄ'],      
    9: ['Cosmic Insights', 'üî≠', 'üåå', 'üíÄ', 'üåÖ', 'üå™Ô∏è', 'üåä', 'üåÄ', 'üçÑ', 'üèñÔ∏è', 'üßö'],   
    10: ['Volcanic Vengeance', 'üåã', 'üí•', 'üî•', 'üåÖ', 'üöÄ', 'ü™ê', 'üå™Ô∏è', 'üíÄ', 'üîç', 'üåå'],           
    11: ['Mystical Midnight', 'üåå', 'üåü', 'üöÄ', 'üå†', 'üåà', 'üåç', 'üåí', 'üíß', 'üèùÔ∏è', 'üî•'],       
    12: ['Jungle Journeys', 'üåø', 'üå≤', 'üåä', 'üåå', 'üçÑ', 'üèîÔ∏è', 'üî≠', 'üåÖ', 'üå™Ô∏è', 'üîÆ'],         
    13: ['Secret Societies', 'üïØÔ∏è', 'üåå', 'üíß', 'üåÖ', 'üå™Ô∏è', 'üîç', 'üìú', 'üåü', 'üçÑ', '‚öôÔ∏è'],       
    14: ['Mechanical Marvels', 'ü¶æ', 'üîç', 'üìú', 'üåå', 'üå≤', 'üå≥', 'üåø', 'üèùÔ∏è', 'üåã', 'üåå'],       
    15: ['Floral Whispers', 'üå∏', 'üå∫', 'üçÉ', 'üåø', 'ü¶â', 'üê¶', 'üå∏', 'üå∫', 'üçÇ', 'üå∞'],       
    16: ['Whirlwind Adventures', 'üå™Ô∏è', 'üåä', 'üçÉ', 'üåø', 'ü¶â', 'üê¶', 'üå∏', 'üå∫', 'üçÇ', 'üå∞'],           
    17: ['Electric Sparks', '‚ö°', 'üîå', 'üí•', '‚öôÔ∏è', 'üîã', 'ü™ì', 'üå©', 'üß®', 'üö°', 'üå™Ô∏è'],        
    18: ['Gears of Time', '‚è≥', '‚è∞', 'üîí', 'üåÖ', 'üì°', 'üß≠', 'üî¨', 'üå°Ô∏è', 'üìö', 'üìú'],      
    19: ['Foggy Cliffhangers', 'üå´Ô∏è', 'üèûÔ∏è', 'üå´Ô∏è', 'üåÅ', 'üèîÔ∏è', '‚ùÑÔ∏è', 'üå®Ô∏è', '‚õÖ', 'üå¶Ô∏è', 'üåÑ'],  
    20: ['Solitary Path', 'üö∂‚Äç‚ôÇÔ∏è', 'üö∂', 'üåÑ', 'üåÖ', 'üö∂‚Äç‚ôÄÔ∏è', 'üèûÔ∏è', 'üå≤', 'üå≥', 'üå≤', 'üå≥'],     
    21: ['Starry Expeditions', '‚ú®', 'üöÄ', 'üå†', 'üåü', 'üåç', 'üåî', 'üåì', 'üåí', 'üåë', 'üåå'],   
    22: ['Inferno Forge', 'üî•', 'üõ†Ô∏è', 'üî•', 'üåã', 'üåå', 'üî•', 'ü™ì', '‚öîÔ∏è', 'üöÄ', 'üåå'],        
    23: ['Snowy Peaks', 'üèîÔ∏è', '‚ùÑÔ∏è', 'üå®Ô∏è', 'üèÇ', 'üèîÔ∏è', 'üèîÔ∏è', '‚ùÑÔ∏è', 'üå®Ô∏è', 'üèÇ', 'üå¨Ô∏è'],         
    24: ['Wasteland Echoes', '‚ò£Ô∏è', 'üî•', 'üí£', 'üî•', 'üåã', 'üåå', 'üíÄ', 'üöÄ', 'üåå'],    
    25: ['Bioluminescent Wonders', 'üåü', 'üåå', 'üåø', 'ü™ê', 'üå≤', 'üå≥', 'üå∏', 'üåº', 'üåª'],  
    26: ['Clockwork Marvels', '‚öôÔ∏è', 'üî©', 'üï∞Ô∏è', 'üì°', 'üß≠', 'üî¨', 'üå°Ô∏è', 'üìö', 'üìú'],  
    27: ['Eclipse Mysteries', 'üåò', 'üåí', 'üåò', 'üåö', 'üåå', 'üåì', 'üåë', 'üåò', 'üåí', 'üåå'],     
    28: ['Arcane Contraptions', 'üîÆ', 'üõ†Ô∏è', 'üì¶', '‚öóÔ∏è', 'üß™', 'üìö', 'üîç', 'üå™Ô∏è', 'üíÄ'],  
    29: ['Candlelit Secrets', 'üïØÔ∏è', 'üåå', 'üîç', 'üì¶', 'üîÆ', 'üìú', 'üìñ', 'üóùÔ∏è', 'üï∞Ô∏è', 'üì¶'],   
}

        self.model = None
        self.clustered_missions = None

    def tokenize_missions(self):
        return [word_tokenize(name.lower()) for name in self.mission_names]

    def train_word2vec(self, tokenized_missions):
        self.model = Word2Vec(
            tokenized_missions,
            vector_size=200,    # Increased vector size
            window=20,          # Fixed or dynamic window size
            min_count=1,
            sg=1,               # Skip-gram model
            hs=1,               # Using hierarchical softmax
            negative=5,         # Negative sampling
            alpha=0.03,         # Initial learning rate
            min_alpha=0.0007,   # Minimum learning rate
            sample=1e-3,        # Higher sample value for more sparseness
            epochs=20           # Increased training epochs
        )

    def get_mission_vector(self, name):
        vector = np.zeros(self.model.vector_size)
        count = 0
        for word in word_tokenize(name.lower()):
            if word in self.model.wv:
                vector += self.model.wv[word]
                count += 1
        return vector / count if count > 0 else vector

    def cluster_missions(self):
        tokenized_missions = self.tokenize_missions()
        self.train_word2vec(tokenized_missions)
        
        # Dimensionality Reduction
        mission_vectors = np.array([self.get_mission_vector(name) for name in self.mission_names])
        pca = PCA(n_components=0.95)  # Retain 95% variance
        reduced_vectors = pca.fit_transform(mission_vectors)

        # Clustering with optimized KMeans
        kmeans = KMeans(n_clusters=self.n_clusters, random_state=0, n_init=10)
        clusters = kmeans.fit_predict(reduced_vectors)
        self.clustered_missions = {}
        for cluster_id, mission_name in zip(clusters, self.mission_names):
            self.clustered_missions.setdefault(cluster_id, []).append(mission_name)

    def get_random_cluster_emoji(self, mission_name):
        mission_name = mission_name.lower()
        for cluster_id, missions in self.clustered_missions.items():
            if mission_name in [m.lower() for m in missions]:
                cluster_info = self.cluster_names_emojis.get(cluster_id + 1, ("Unknown", ["‚ùì"]))
                emojis = cluster_info[1:]
                return random.choice(emojis) 
        return "‚ùì"